/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.swing.table.DefaultTableModel;
import model.car;
import model.carFleet;
import java.util.stream.Collectors;
import javax.swing.JComboBox;

/**
 *
 * @author sirip
 */
public class FilterJPanel extends javax.swing.JPanel {

    /**
     * Creates new form FilterJPanel
     */
    carFleet fleet;
    ArrayList tempFleet = new ArrayList<car>();
    
    public FilterJPanel(carFleet fleet) {
        initComponents();
        
        this.fleet = fleet;
        
        ArrayList<String> AvailStatus = new ArrayList<String>();
        ArrayList<String> Mfrer = new ArrayList<String>();
        ArrayList<String> City = new ArrayList<String>();
             
        for (car c: fleet.getFleet()){
            if(c.isAvailability()){
                AvailStatus.add("Available");
            }
            else{
                AvailStatus.add("Unavailable");
            }
            Mfrer.add(c.getManufacturer());
            City.add(c.getCity());
        }
        
        Set<String> UniqueAvailStatus = new HashSet<String>(AvailStatus);
        Set<String> UniqueMfrer = new HashSet<String>(Mfrer);
        Set<String> UniqueCity = new HashSet<String>(City);
        
        for (String status: UniqueAvailStatus){
           cmbAvailabilityStatus.addItem(status); 
        }
        for (String mfrer: UniqueMfrer){
           cmbManufacturer.addItem(mfrer); 
        }
        for (String city: UniqueCity){
           cmbCity.addItem(city);
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblFleet = new javax.swing.JTable();
        lblFilterTitle = new javax.swing.JLabel();
        btnFirstAvailable = new javax.swing.JButton();
        txtNumAvailable = new javax.swing.JTextField();
        cmbAvailabilityStatus = new javax.swing.JComboBox<>();
        lblAvailStatus = new javax.swing.JLabel();
        lblStatusNum = new javax.swing.JLabel();
        cmbManufacturer = new javax.swing.JComboBox<>();
        lblAvailStatus1 = new javax.swing.JLabel();
        cmbCity = new javax.swing.JComboBox<>();
        lblAvailStatus2 = new javax.swing.JLabel();
        btnExpiredMtn = new javax.swing.JButton();
        btnInputYear = new javax.swing.JButton();
        bthSearchSeats = new javax.swing.JButton();
        txtMinSeats = new javax.swing.JTextField();
        txtMaxSeats = new javax.swing.JTextField();
        txtInputYear = new javax.swing.JTextField();
        btnSerialSearch = new javax.swing.JButton();
        txtSerialSearch = new javax.swing.JTextField();
        btnModelSearch = new javax.swing.JButton();
        txtModelSearch = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(1201, 567));

        tblFleet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Manufacturer", "Availability", "Manufactured Year", "Number of Seats", "Serial Number", "Model Number", "City", "Expired Maintenance", "ETA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblFleet.setShowGrid(false);
        tblFleet.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblFleet);

        lblFilterTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblFilterTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFilterTitle.setText("Search Car Fleet");

        btnFirstAvailable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnFirstAvailable.setText("First Available Car");
        btnFirstAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstAvailableActionPerformed(evt);
            }
        });

        txtNumAvailable.setEditable(false);

        cmbAvailabilityStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbAvailabilityStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All" }));
        cmbAvailabilityStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAvailabilityStatusActionPerformed(evt);
            }
        });

        lblAvailStatus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblAvailStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAvailStatus.setText("Search by Status");

        lblStatusNum.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblStatusNum.setText("Number");

        cmbManufacturer.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbManufacturer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Manufacturer" }));
        cmbManufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbManufacturerActionPerformed(evt);
            }
        });

        lblAvailStatus1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblAvailStatus1.setText("Available by Manufacturer");

        cmbCity.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select City" }));
        cmbCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCityActionPerformed(evt);
            }
        });

        lblAvailStatus2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblAvailStatus2.setText("Available cars by City");

        btnExpiredMtn.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnExpiredMtn.setText("Expired Maintenance");
        btnExpiredMtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpiredMtnActionPerformed(evt);
            }
        });

        btnInputYear.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnInputYear.setText("Search by Manf. Year");
        btnInputYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInputYearActionPerformed(evt);
            }
        });

        bthSearchSeats.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bthSearchSeats.setText("Search by #Seats");
        bthSearchSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bthSearchSeatsActionPerformed(evt);
            }
        });

        txtMinSeats.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtMinSeats.setText("Min Seats");
        txtMinSeats.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtMinSeatsMouseClicked(evt);
            }
        });

        txtMaxSeats.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtMaxSeats.setText("Max Seats");
        txtMaxSeats.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtMaxSeatsMouseClicked(evt);
            }
        });

        txtInputYear.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtInputYear.setText("Input Year");
        txtInputYear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtInputYearMouseClicked(evt);
            }
        });

        btnSerialSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSerialSearch.setText("Search by Serial No.");
        btnSerialSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerialSearchActionPerformed(evt);
            }
        });

        txtSerialSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtSerialSearch.setText("Input Serial No.");
        txtSerialSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSerialSearchMouseClicked(evt);
            }
        });

        btnModelSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnModelSearch.setText("Search by Model No.");
        btnModelSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModelSearchActionPerformed(evt);
            }
        });

        txtModelSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtModelSearch.setText("Input Model No.");
        txtModelSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtModelSearchMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblFilterTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnFirstAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnInputYear)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtInputYear, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(102, 102, 102))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblAvailStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                    .addComponent(cmbAvailabilityStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNumAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblStatusNum))
                                .addGap(61, 61, 61)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cmbManufacturer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblAvailStatus1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(70, 70, 70)
                                .addComponent(btnModelSearch)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(bthSearchSeats)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblAvailStatus2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(txtModelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63)
                                .addComponent(btnSerialSearch)
                                .addGap(18, 18, 18)
                                .addComponent(txtSerialSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnExpiredMtn)
                                .addContainerGap(124, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblFilterTitle)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bthSearchSeats)
                            .addComponent(txtMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAvailStatus2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnFirstAvailable, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnInputYear)
                                .addComponent(txtInputYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAvailStatus)
                    .addComponent(lblStatusNum)
                    .addComponent(lblAvailStatus1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbAvailabilityStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbManufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSerialSearch)
                    .addComponent(txtSerialSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModelSearch)
                    .addComponent(btnExpiredMtn)
                    .addComponent(txtModelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
    }// </editor-fold>//GEN-END:initComponents

 
    
    private void btnFirstAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstAvailableActionPerformed
        // TODO add your handling code here:
        tempFleet.clear();
        
        for (car c:fleet.getFleet()){            
            tempFleet.add(c);
        }
        Collections.sort(tempFleet);
        
        populateSelectedTable(tempFleet, 1);
    }//GEN-LAST:event_btnFirstAvailableActionPerformed

    private void cmbAvailabilityStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAvailabilityStatusActionPerformed
        // TODO add your handling code here:++
        tempFleet.clear();

        ArrayList tempFleetAvail = new ArrayList<car>();
        ArrayList tempFleetUnavail = new ArrayList<car>();
        String selectedValue = cmbAvailabilityStatus.getSelectedItem().toString();
        
        tempFleetAvail.clear();
        tempFleetUnavail.clear();
        
        for (car c:fleet.getFleet()){
            if (c.isAvailability()){
                tempFleetAvail.add(c);
            }
            else{
                tempFleetUnavail.add(c);
            }
            tempFleet.add(c);
        }
        
        if ("Available".equals(selectedValue)){   
            txtNumAvailable.setText(String.valueOf(tempFleetAvail.size()));
            populateSelectedTable(tempFleetAvail, tempFleetAvail.size());
        }
        else if ("Unavailable".equals(selectedValue)){
            txtNumAvailable.setText(String.valueOf(tempFleetUnavail.size()));
            populateSelectedTable(tempFleetUnavail, tempFleetUnavail.size());
        }
        else{
            txtNumAvailable.setText(String.valueOf(tempFleet.size()));
            populateSelectedTable(tempFleet, tempFleet.size());
        }
        tempFleetUnavail.clear();
    }//GEN-LAST:event_cmbAvailabilityStatusActionPerformed

    private void cmbManufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbManufacturerActionPerformed
        // TODO add your handling code here:
        String selectedValue = cmbManufacturer.getSelectedItem().toString();
        
        tempFleet.clear();
        
        for (car c:fleet.getFleet()){
            if (c.getManufacturer()==selectedValue && c.isAvailability()){
                tempFleet.add(c);
            }
        }  
        populateSelectedTable(tempFleet, tempFleet.size());
    }//GEN-LAST:event_cmbManufacturerActionPerformed

    private void cmbCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCityActionPerformed
        // TODO add your handling code here:
        String selectedValue = cmbCity.getSelectedItem().toString();
        tempFleet.clear();
        
        for (car c:fleet.getFleet()){
            if (c.getCity()==selectedValue && c.isAvailability()){
                tempFleet.add(c);
            }
        }  
        populateSelectedTable(tempFleet, tempFleet.size());
    }//GEN-LAST:event_cmbCityActionPerformed

    private void btnExpiredMtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpiredMtnActionPerformed
        // TODO add your handling code here:
        tempFleet.clear();
        
        for (car c:fleet.getFleet()){
            if (c.isExpired()){
                tempFleet.add(c);
            }
        }
        populateSelectedTable(tempFleet, tempFleet.size());
    }//GEN-LAST:event_btnExpiredMtnActionPerformed

    private void btnInputYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInputYearActionPerformed
        // TODO add your handling code here:
        tempFleet.clear();

        int selectedYear = Integer.parseInt(txtInputYear.getText());
        for (car c:fleet.getFleet()){
            if (c.getManfyear()==selectedYear){
                tempFleet.add(c);
            }
        }
        populateSelectedTable(tempFleet, tempFleet.size());
    }//GEN-LAST:event_btnInputYearActionPerformed

    private void bthSearchSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bthSearchSeatsActionPerformed
        // TODO add your handling code here:
        tempFleet.clear();
        
        int minSeats = Integer.parseInt(txtMinSeats.getText());
        int maxSeats = Integer.parseInt(txtMaxSeats.getText());
        
        for (car c:fleet.getFleet()){
            if ((c.getNseats() >= minSeats) && (c.getNseats() <= maxSeats)){
                tempFleet.add(c);
            }
        }
        populateSelectedTable(tempFleet, tempFleet.size());
        
    }//GEN-LAST:event_bthSearchSeatsActionPerformed

    private void txtInputYearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtInputYearMouseClicked
        // TODO add your handling code here:
        txtInputYear.setText("");
    }//GEN-LAST:event_txtInputYearMouseClicked

    private void txtMinSeatsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtMinSeatsMouseClicked
        // TODO add your handling code here:
        txtMinSeats.setText("");
    }//GEN-LAST:event_txtMinSeatsMouseClicked

    private void txtMaxSeatsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtMaxSeatsMouseClicked
        // TODO add your handling code here:
        txtMaxSeats.setText("");
    }//GEN-LAST:event_txtMaxSeatsMouseClicked

    private void btnSerialSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerialSearchActionPerformed
        // TODO add your handling code here:
        tempFleet.clear();
        
        for (car c:fleet.getFleet()){
            if (c.getSerialno().equals(txtSerialSearch.getText())){
                tempFleet.add(c);
            }
        }
        populateSelectedTable(tempFleet, tempFleet.size());
    }//GEN-LAST:event_btnSerialSearchActionPerformed

    private void txtSerialSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSerialSearchMouseClicked
        // TODO add your handling code here:
        txtSerialSearch.setText("");
    }//GEN-LAST:event_txtSerialSearchMouseClicked

    private void btnModelSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModelSearchActionPerformed
        // TODO add your handling code here:
        tempFleet.clear();
        
        for (car c:fleet.getFleet()){
            if (c.getModelno().equals(txtModelSearch.getText())){
                tempFleet.add(c);
            }
        }
        populateSelectedTable(tempFleet, tempFleet.size());
    }//GEN-LAST:event_btnModelSearchActionPerformed

    private void txtModelSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtModelSearchMouseClicked
        // TODO add your handling code here:
        txtModelSearch.setText("");
    }//GEN-LAST:event_txtModelSearchMouseClicked



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bthSearchSeats;
    private javax.swing.JButton btnExpiredMtn;
    private javax.swing.JButton btnFirstAvailable;
    private javax.swing.JButton btnInputYear;
    private javax.swing.JButton btnModelSearch;
    private javax.swing.JButton btnSerialSearch;
    private javax.swing.JComboBox<String> cmbAvailabilityStatus;
    private javax.swing.JComboBox<String> cmbCity;
    private javax.swing.JComboBox<String> cmbManufacturer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAvailStatus;
    private javax.swing.JLabel lblAvailStatus1;
    private javax.swing.JLabel lblAvailStatus2;
    private javax.swing.JLabel lblFilterTitle;
    private javax.swing.JLabel lblStatusNum;
    private javax.swing.JTable tblFleet;
    private javax.swing.JTextField txtInputYear;
    private javax.swing.JTextField txtMaxSeats;
    private javax.swing.JTextField txtMinSeats;
    private javax.swing.JTextField txtModelSearch;
    private javax.swing.JTextField txtNumAvailable;
    private javax.swing.JTextField txtSerialSearch;
    // End of variables declaration//GEN-END:variables

    private void populateSelectedTable(ArrayList<car> selectedFleet, int limit) {
        
        DefaultTableModel model = (DefaultTableModel) tblFleet.getModel();
        model.setRowCount(0);
        int i = 0;  
        
        for (car c : selectedFleet){
            if (i >= limit){
                break;
            }            
            Object[] row = new Object[9];
            
            row[0] = c;
            row[1] = c.isAvailability();
            row[2] = c.getManfyear();
            row[3] = c.getNseats();
            row[4] = c.getSerialno();
            row[5] = c.getModelno();
            row[6] = c.getCity();
            row[7] = c.isExpired();
            row[8] = c.getEta();
            model.addRow(row);
            i++;
        }
    }
    
}
